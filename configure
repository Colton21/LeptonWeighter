#!/bin/sh

## THIS WAS MODIFIED FROM THE NUSQUIDS CONFIGURATION FILE AND ADDED FOR THIS. CAD.

check_pkgconfig(){
	if [ "$CHECKED_PKGCONFIG" ]; then return; fi
	echo "Looking for pkg-config..."
	which pkg-config 2>&1 > /dev/null
	if [ "$?" -ne 0 ]; then
		echo "Error: pkg-config not found; you will need to specify library locations manually" 1>&2
		exit 1
	fi
	CHECKED_PKGCONFIG=1
}

find_package(){
	PKG=$1
	VAR_PREFIX=`echo $PKG | tr [:lower:] [:upper:]`
	TMP_FOUND=`eval echo "$"${VAR_PREFIX}_FOUND`
	if [ "$TMP_FOUND" ]; then return; fi
	check_pkgconfig
	echo "Looking for $PKG..."

	pkg-config --exists $PKG
	if [ "$?" -ne 0 ]; then
		echo " $PKG not found with pkg-config"
		return
	fi
	if [ $# -ge 2 ]; then
		MIN_VERSION=$2
		pkg-config --atleast-version $MIN_VERSION $PKG
		if [ "$?" -ne 0 ]; then
			echo "Error: installed $PKG version ("`pkg-config --modversion $PKG`") is too old; version >=$MIN_VERSION is required" 1>&2
			exit 1
		fi
	fi
	echo " Found $PKG version `pkg-config --modversion $PKG`"
	eval ${VAR_PREFIX}_FOUND=1
	eval ${VAR_PREFIX}_VERSION=\"`pkg-config --modversion $PKG`\"
	eval ${VAR_PREFIX}_CFLAGS=\"`pkg-config --cflags $PKG`\"
	eval ${VAR_PREFIX}_LDFLAGS=\"`pkg-config --libs $PKG`\"
	eval ${VAR_PREFIX}_INCDIR=\"`pkg-config --variable=includedir $PKG`\"
	eval ${VAR_PREFIX}_LIBDIR=\"`pkg-config --variable=libdir $PKG`\"
}

try_find_photospline(){
	if [ ! "$PHOTOSPLINE_CONFIG" ]; then
    PHOTOSPLINE_CONFIG="photospline-config"
  fi

	TMP_FOUND=`eval echo "$"PHOTOSPLINE_FOUND`
	if [ "$TMP_FOUND" ]; then return; fi
  echo $PHOTOSPLINE_CONFIG

	which "$PHOTOSPLINE_CONFIG" 2>&1 > /dev/null
	if [ "$?" -ne 0 ]; then return; fi

  PHOTOSPLINE_VERSION=`$PHOTOSPLINE_CONFIG --version`
	PHOTOSPLINE_CFLAGS=`$PHOTOSPLINE_CONFIG --cflags`
	PHOTOSPLINE_LDFLAGS=`$PHOTOSPLINE_CONFIG --libs`

	PHOTOSPLINE_FOUND=1
}

try_find_boost(){
	GUESS_DIR=$1
	PKG=boost
	VAR_PREFIX=`echo $PKG | tr [:lower:] [:upper:]`
	TMP_FOUND=`eval echo "$"${VAR_PREFIX}_FOUND`
	if [ "$TMP_FOUND" ]; then return; fi
	echo "Looking for $PKG in $GUESS_DIR..."
	POSSIBLE_BOOST_LIBDIRS="${GUESS_DIR}/lib ${GUESS_DIR}/lib64 ${GUESS_DIR}/lib/x86_64-linux-gnu"
	POSSIBLE_BOOST_INCDIRS="${GUESS_DIR}/include"
	for BOOST_LIBDIR in $POSSIBLE_BOOST_LIBDIRS; do
		if [ -d $BOOST_LIBDIR -a \( -e $BOOST_LIBDIR/libboost_python.a -o -e $BOOST_LIBDIR/libboost_python.so \) ]; then
			break
		fi
	done
	if [ ! -d $BOOST_LIBDIR -o ! \( -e $BOOST_LIBDIR/libboost_python.a -o -e $BOOST_LIBDIR/libboost_python.so \) ]; then
		echo " Unable to locate the boost_python libray in $GUESS_DIR"
		return
	fi
	for BOOST_INCDIR in $POSSIBLE_BOOST_INCDIRS; do
		if [ -d $BOOST_INCDIR -a -e $BOOST_INCDIR/boost/python.hpp ]; then
			break
		fi
	done
	if [ ! -d $BOOST_INCDIR -o ! $BOOST_INCDIR/boost/python.hpp ]; then
		echo " Unable to locate boost/python.hpp in $GUESS_DIR"
		return
	fi
	BOOST_CFLAGS="-I${BOOST_INCDIR}"
	BOOST_LDFLAGS="-Wl,-rpath -Wl,${BOOST_LIBDIR} -L${BOOST_LIBDIR}"
	BOOST_FOUND=1
	echo " Found boost in $GUESS_DIR"
}

ensure_found(){
	PKG=$1
	VAR_PREFIX=`echo $PKG | tr [:lower:] [:upper:]`
	TMP_FOUND=`eval echo "$"${VAR_PREFIX}_FOUND`
	if [ "$TMP_FOUND" ]; then return; fi
	#not found
	echo "Error: $PKG not installed or not registered with pkg-config" 1>&2
	lowername=`echo $PKG | tr [A-Z] [a-z]`
	echo "Please specify location using the --with-"$lowername" flag" 1>&2
	exit 1
}

PREFIX=/usr/local

VERSION_NUM=100000
VERSION=`echo $VERSION_NUM | awk '{
	major = int($1/100000);
	minor = int($1/100)%1000;
	patch = $1%100;
	print major"."minor"."patch;
}'`

OS_NAME=`uname -s`

GUESS_CC=gcc
GUESS_CXX=g++
GUESS_AR=ar
GUESS_LD=ld
if [ "$OS_NAME" = Linux ]; then
	DYN_SUFFIX=.so
	DYN_OPT='-shared -Wl,-soname,$(shell basename $(DYN_PRODUCT))'
fi
if [ "$OS_NAME" = Darwin ]; then
	GUESS_CC=clang
	GUESS_CXX=clang++
	GUESS_LD=clang++
	DYN_SUFFIX=.dylib
  DYN_OPT='-dynamiclib -compatibility_version $(VERSION) -current_version $(VERSION)'
fi

CC=${CC-$GUESS_CC}
CXX=${CXX-$GUESS_CXX}
AR=${AR-$GUESS_AR}
LD=${LD-$GUESS_LD}

PYTHON_EXE="python"

HELP="Usage: ./configure [OPTION]... 

Installation directories:
  --prefix=PREFIX         install files in PREFIX
                          [$PREFIX]

By default, \`make install' will install all the files in
\`$PREFIX/bin', \`$PREFIX/lib' etc.  You can specify
an installation prefix other than \`$PREFIX' using \`--prefix',
for instance \`--prefix=\$HOME'.

The following options can be used to maunally specify the 
locations of dependencies:
  --with-squids=DIR        use the copy of SQuIDS in DIR
                           assuming headers are in DIR/include
                           and libraries in DIR/lib
  --with-squids-incdir=DIR        use the copy of SQuIDS in DIR
  --with-squids-libdir=DIR        use the copy of SQuIDS in DIR

  --with-nusquids=DIR        use the copy of nuSQuIDS in DIR
                           assuming headers are in DIR/include
                           and libraries in DIR/lib
  --with-nusquids-incdir=DIR        use the copy of nuSQuIDS in DIR
  --with-nusquids-libdir=DIR        use the copy of nuSQuIDS in DIR

  --with-newnuflux=DIR        use the copy of NewNuFlux in DIR
                           assuming headers are in DIR/include
                           and libraries in DIR/lib
  --with-newnuflux-incdir=DIR        use the copy of NewNuFlux in DIR
  --with-newnuflux-libdir=DIR        use the copy of NewNuFlux in DIR

  --with-photospline-config=BIN  Path to photospline-config executable

  --with-boost-incdir=DIR        use the copy of Boost in DIR
  --with-boost-libdir=DIR        use the copy of Boost in DIR
  --with-boost=DIR               use the copy of Boost in DIR
                                 assuming headers are in DIR/include
                                 and libraries in DIR/lib

Some influential environment variables:
CC          C compiler command
CXX         C++ compiler command
AR          Static linker command
LD          Dynamic linker command
" #`

for var in "$@"
do
	if [ "$var" = "--help" -o "$var" = "-h" ]; then
		echo "$HELP"
		exit 0
	fi

  # PREFIX #
	TMP=`echo "$var" | sed -n 's/^--prefix=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then PREFIX="$TMP"; continue; fi

  # SQUIDS #
	TMP=`echo "$var" | sed -n 's/^--with-squids=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then
		SQUIDS_INCDIR="${TMP}/include";
		SQUIDS_LIBDIR="${TMP}/lib";
	continue; fi

	TMP=`echo "$var" | sed -n 's/^--with-squids-incdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then SQUIDS_INCDIR="$TMP"; continue; fi

	TMP=`echo "$var" | sed -n 's/^--with-squids-libdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then SQUIDS_LIBDIR="$TMP"; continue; fi

  # NUSQUIDS #
	TMP=`echo "$var" | sed -n 's/^--with-nusquids=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then
		NUSQUIDS_INCDIR="${TMP}/include";
		NUSQUIDS_LIBDIR="${TMP}/lib";
	continue; fi

	TMP=`echo "$var" | sed -n 's/^--with-nusquids-incdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then NUSQUIDS_INCDIR="$TMP"; continue; fi

	TMP=`echo "$var" | sed -n 's/^--with-nusquids-libdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then NUSQUIDS_LIBDIR="$TMP"; continue; fi

  # PHOTOSPLINE #
	TMP=`echo "$var" | sed -n 's/^--with-photospline-config=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then
		PHOTOSPLINE_CONFIG="${TMP}";
	continue; fi

  # BOOST #
	TMP=`echo "$var" | sed -n 's/^--with-boost=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then
		BOOST_INCDIR="${TMP}/include";
		BOOST_LIBDIR="${TMP}/lib";
	continue; fi

	TMP=`echo "$var" | sed -n 's/^--with-boost-libdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then BOOST_LIBDIR="$TMP"; continue; fi
	TMP=`echo "$var" | sed -n 's/^--with-boost-incdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then BOOST_INCDIR="$TMP"; continue; fi

  # NEWNUFLUX #
	TMP=`echo "$var" | sed -n 's/^--with-newnuflux=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then
		NEWNUFLUX_INCDIR="${TMP}/include";
		NEWNUFLUX_LIBDIR="${TMP}/lib";
	continue; fi

	TMP=`echo "$var" | sed -n 's/^--with-newnuflux-libdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then NEWNUFLUX_LIBDIR="$TMP"; continue; fi
	TMP=`echo "$var" | sed -n 's/^--with-newnuflux-incdir=\(.*\)$/\1/p'`
	if [ "$TMP" ]; then NEWNUFLUX_INCDIR="$TMP"; continue; fi

  # KILL #
	echo "config.sh: Unknown or malformed option '$var'" 1>&2
	exit 1
done

if [ "$SQUIDS_INCDIR" -a "$SQUIDS_LIBDIR" ]; then
	echo "Checking manually specified SQUIDS..."
	if [ -d "$SQUIDS_INCDIR" \
         -a -d "$SQUIDS_LIBDIR" \
         -a -e "$SQUIDS_LIBDIR/libSQuIDS.a" ]; then
		SQUIDS_FOUND=1
		SQUIDS_CFLAGS="-I$SQUIDS_INCDIR"
		SQUIDS_LDFLAGS="-L$SQUIDS_LIBDIR -lSQuIDS"
		if $CXX --version | grep -q "Free Software Foundation"; then
			SQUIDS_CFLAGS="$SQUIDS_CFLAGS -Wno-abi"
		fi
	else
		echo "Warning: manually specifed SQUIDS not found; will attempt auto detection"
	fi
fi

find_package squids 1.2

if [ "$NUSQUIDS_INCDIR" -a "$NUSQUIDS_LIBDIR" ]; then
	echo "Checking manually specified nuSQuIDS..."
	if [ -d "$NUSQUIDS_INCDIR" \
         -a -d "$NUSQUIDS_LIBDIR" \
         -a -e "$NUSQUIDS_LIBDIR/libnuSQuIDS.a" ]; then
		NUSQUIDS_FOUND=1
		NUSQUIDS_CFLAGS="-I$NUSQUIDS_INCDIR"
		NUSQUIDS_LDFLAGS="-L$NUSQUIDS_LIBDIR -lnuSQuIDS"
		if $CXX --version | grep -q "Free Software Foundation"; then
			SQUIDS_CFLAGS="$NUSQUIDS_CFLAGS -Wno-abi"
		fi
	else
		echo "Warning: manually specifed nuSQuIDS not found; will attempt auto detection"
	fi
fi

find_package nusquids 1.0

if [ "$PHOTOSPLINE_CONFIG" ]; then
	echo "Checking manually specified photospline-config..."
	if [ ! "$PHOTOSPLINE_CONFIG" ]; then
    PHOTOSPLINE_CONFIG="photospline-config"
		echo "Warning: manually specifed photospline-config not found; will attempt auto detection"
	fi
fi

try_find_photospline

if [ "$BOOST_INCDIR" -a "$BOOST_LIBDIR" ]; then
  echo "Checking manually specified boost..."
  if [ -d "$BOOST_INCDIR" \
    -a -d "$BOOST_LIBDIR" \
    -a -e "$BOOST_INCDIR/boost/python.hpp" \
    -a -e "$BOOST_LIBDIR/libboost_python.a" ]; then
    BOOST_FOUND=1
    BOOST_CFLAGS="-I$BOOST_INCDIR"
    BOOST_LDFLAGS="-Wl,-rpath -Wl,${BOOST_LIBDIR} -L$BOOST_LIBDIR "
  else
    echo "Warning: manually specifed boost not found; will attempt auto detection"
  fi
fi

try_find_boost /usr
try_find_boost /usr/local

if [ -z $BOOST_LIBDIR -a  -z $BOOST_INCDIR ]; then
  echo "Error: Specify BOOST library path using --with-boost-libdir and BOOST include path using --with-boost-incdir."
  exit 1
fi
if [ -z $BOOST_LIBDIR ]; then
  echo "Error: Specify BOOST library path using  --with-boost-libdir."
  exit 1
fi
if [ -z $BOOST_INCDIR ]; then
  echo "Error: Specify BOOST include path using  --with-boost-incdir."
  exit 1
fi

if [ "$NEWNUFLUX_INCDIR" -a "$NEWNUFLUX_LIBDIR" ]; then
	echo "Checking manually specified NewNuFlux..."
	if [ -d "$NEWNUFLUX_INCDIR" \
         -a -d "$NEWNUFLUX_LIBDIR" \
         -a \( -e "$NEWNUFLUX_LIBDIR/libNewNuFlux.so" -o -e "$NEWNUFLUX_LIBDIR/libNewNuFlux.dylib" \) ]; then
		NEWNUFLUX_FOUND=1
		NEWNUFLUX_CFLAGS="-I$NEWNUFLUX_INCDIR"
		NEWNUFLUX_LDFLAGS="-L$NEWNUFLUX_LIBDIR -lNewNuFlux"
		if $CXX --version | grep -q "Free Software Foundation"; then
			NEWNUFLUX_CFLAGS="$NEWNUFLUX_CFLAGS -Wno-abi"
		fi
	else
		echo "Warning: manually specifed NewNuFlux not found; will attempt auto detection"
	fi
fi

find_package newnuflux 1.0

## CHECK THINGS ARE GOOD ##

#ensure_found squids
#ensure_found nusquids
#ensure_found newnuflux
ensure_found photospline
ensure_found boost

if [ ! -d ./build/ ]; then
    mkdir build;
fi
if [ ! -d ./lib/ ]; then
    mkdir lib;
fi

# Resolve PREFIX absolutely
OLDPWD=`pwd`
cd "$PREFIX"
PREFIX=`pwd`
cd "$OLDPWD"

echo "Generating pkg-config file..."
echo "prefix=$PREFIX" > lib/leptonweighter.pc

PKGCONF_REQUIREMENTS=""
if [ "$NUSQUIDS_FOUND" ]; then
	PKGCONF_REQUIREMENTS="$PKGCONF_REQUIREMENTS nusquids >= 1.0.0"
fi
if [ "$NEWNUFLUX_FOUND" ]; then
	PKGCONF_REQUIREMENTS="$PKGCONF_REQUIREMENTS newnuflux >= 1.0.0"
fi

echo '
libdir=${prefix}/lib
includedir=${prefix}/include

Name: LeptonWeighter
Description: Weights events generated by LeptonInjector
URL: http://code.icecube.wisc.edu/svn/sandbox/LeptonWeighter/ ' >> lib/leptonweighter.pc
echo "Version: $VERSION" >> lib/leptonweighter.pc
echo "Requires: ${PKGCONF_REQUIREMENTS}" >> lib/leptonweighter.pc
echo 'Libs: -L${libdir} -lLeptonWeighter
Cflags: -I${includedir}
' >> lib/leptonweighter.pc

echo "Generating makefile..."
echo "# Compiler
CC=$CC
CXX=$CXX
AR=$AR
LD=$LD

DYN_SUFFIX=$DYN_SUFFIX
DYN_OPT=$DYN_OPT

VERSION=$VERSION
PREFIX=$PREFIX
" > ./Makefile

echo '
PATH_LW=$(shell pwd)

SOURCES = private/LeptonWeighter/CrossSection.cpp \
          private/LeptonWeighter/ParticleType.cpp \
          private/LeptonWeighter/Generator.cpp \
          private/LeptonWeighter/Weighter.cpp \
          private/LeptonWeighter/LeptonInjectorConfigReader.cpp \
          private/LeptonWeighter/Utils.cpp

HEADERS = public/LeptonWeighter/Constants.h \
          public/LeptonWeighter/CrossSection.h \
          public/LeptonWeighter/Event.h \
          public/LeptonWeighter/Flux.h \
          public/LeptonWeighter/Generator.h \
          public/LeptonWeighter/LeptonInjectorConfigReader.h \
          public/LeptonWeighter/MetaWeighter.h \
          public/LeptonWeighter/ParticleType.h \
          public/LeptonWeighter/Utils.h \
          public/LeptonWeighter/Weighter.h

OBJECTS = $(patsubst private/LeptonWeighter/%.cpp,build/%.o,$(SOURCES))

NUSQ_SOURCES = private/LeptonWeighter/nuSQFluxInterface.cpp

NUSQ_HEADERS = public/LeptonWeighter/nuSQFluxInterface.h

NUSQ_OBJECTS = $(patsubst private/LeptonWeighter/%.cpp,build/%.o,$(NUSQ_SOURCES))
' >> ./Makefile

if [ "$NUSQUIDS_FOUND" ]; then
echo 'OBJECTS += ${NUSQ_OBJECTS}' >> ./Makefile
echo 'HEADERS += ${NUSQ_HEADERS}' >> ./Makefile
fi

echo '
NNF_SOURCES = private/LeptonWeighter/NNFluxInterface.cpp

NNF_HEADERS = public/LeptonWeighter/NNFluxInterface.h

NNF_OBJECTS = $(patsubst private/LeptonWeighter/%.cpp,build/%.o,$(NNF_SOURCES))
' >> ./Makefile

if [ "$NUSQUIDS_FOUND" ]; then
echo 'OBJECTS += ${NNF_OBJECTS}' >> ./Makefile
echo 'HEADERS += ${NNF_HEADERS}' >> ./Makefile
fi

echo '
EXAMPLES = resources/example/main.exe \
           resources/example/read_lic.exe
NUSQ_EXAMPLES = resources/example/main_with_nusquids.exe
' >> ./Makefile

if [ "$NUSQUIDS_FOUND" ]; then
echo 'EXAMPLES += ${NUSQ_EXAMPLES}' >> ./Makefile
fi

echo '
CXXFLAGS = -std=c++11 -O3

# Directories
'  >> ./Makefile
echo "SQUIDS_CFLAGS=$SQUIDS_CFLAGS" >> ./Makefile
echo "SQUIDS_LDFLAGS=$SQUIDS_LDFLAGS" >> ./Makefile

echo "NUSQUIDS_CFLAGS=$NUSQUIDS_CFLAGS" >> ./Makefile
echo "NUSQUIDS_LDFLAGS=$NUSQUIDS_LDFLAGS" >> ./Makefile

echo "NEWNUFLUX_CFLAGS=$NEWNUFLUX_CFLAGS" >> ./Makefile
echo "NEWNUFLUX_LDFLAGS=$NEWNUFLUX_LDFLAGS" >> ./Makefile

echo "BOOST_CFLAGS=$BOOST_CFLAGS" >> ./Makefile
echo "BOOST_LDFLAGS=$BOOST_LDFLAGS" >> ./Makefile

echo "PHOTOSPLINE_CFLAGS=$PHOTOSPLINE_CFLAGS" >> ./Makefile
echo "PHOTOSPLINE_LDFLAGS=$PHOTOSPLINE_LDFLAGS" >> ./Makefile

echo '

INC_LW=$(PATH_LW)/public
LIB_LW=$(PATH_LW)/lib

# FLAGS
CFLAGS= -O3 -fPIC -I$(INC_LW) $(SQUIDS_CFLAGS) $(NUSQUIDS_CFLAGS) $(PHOTOSPLINE_CFLAGS) $(NEWNUFLUX_CFLAGS) $(BOOST_CFLAGS)

LDFLAGS= -Wl,-rpath -Wl,$(LIB_LW) -L$(LIB_LW)
LDFLAGS+= $(SQUIDS_LDFLAGS) $(NUSQUIDS_LDFLAGS) $(PHOTOSPLINE_LDFLAGS) $(NEWNUFLUX_LDFLAGS) $(BOOST_LDFLAGS)
EXAMPLES_FLAGS=-I$(INC_LW) $(CXXFLAGS) $(CFLAGS)

# Project files
NAME=LeptonWeighter
STAT_PRODUCT:=lib/lib$(NAME).a
DYN_PRODUCT:=lib/lib$(NAME)$(DYN_SUFFIX)

# Compilation rules
all: $(STAT_PRODUCT) $(DYN_PRODUCT)

examples : $(EXAMPLES)

$(DYN_PRODUCT) : $(OBJECTS)
	@echo Linking $(DYN_PRODUCT)
	@$(CXX) $(DYN_OPT)  $(LDFLAGS) -o $(DYN_PRODUCT) $(OBJECTS)

$(STAT_PRODUCT) : $(OBJECTS)
	@echo Linking $(STAT_PRODUCT)
	@$(AR) -rcs $(STAT_PRODUCT) $(OBJECTS)

build/%.o : private/LeptonWeighter/%.cpp
	@echo Compiling $< to $@
	@$(CXX) $(CXXFLAGS) -c $(CFLAGS) $< -o $@

resources/example/main.exe: resources/example/main.cpp
	@echo Compiling simple example
	@$(CXX) $(CXXFLAGS) resources/example/main.cpp -L./lib -lLeptonWeighter $(LDFLAGS) -o $@

resources/example/main_with_nusquids.exe: resources/example/main_with_nusquis.cpp
	@echo Compiling simple example with nusquids
	@$(CXX) $(CXXFLAGS) resources/example/main_with_nusquids.cpp -L./lib -lLeptonWeighter $(LDFLAGS) -o $@

resources/example/read_lic.exe: resources/example/read_lic.cpp
	@echo Compiling lic reader
	@$(CXX) $(CXXFLAGS) resources/example/read_lic.cpp -L./lib -lLeptonWeighter $(LDFLAGS) -o $@

.PHONY: install uninstall clean test docs
clean:
	@echo Erasing generated files
	@rm -f $(PATH_LW)/build/*.o
	@rm -f $(PATH_LW)/$(STAT_PRODUCT) $(PATH_LW)/$(DYN_PRODUCT) $(EXAMPLES)

doxygen:
	@mkdir -p ./docs
	@doxygen resources/docs/doxyfile
docs:
	@mkdir -p ./docs
	@doxygen resources/docs/doxyfile

install: $(DYN_PRODUCT) $(STAT_PRODUCT)
	@echo Installing headers in $(PREFIX)/include/LeptonWeighter
	@mkdir -p $(PREFIX)/include/LeptonWeighter
	@cp $(HEADERS) $(PREFIX)/include/LeptonWeighter
	@echo Installing libraries in $(PREFIX)/lib
	@mkdir -p $(PREFIX)/lib
	@cp $(DYN_PRODUCT) $(STAT_PRODUCT) $(PREFIX)/lib
	@echo Installing config information in $(PREFIX)/lib/pkgconfig
	@mkdir -p $(PREFIX)/lib/pkgconfig
	@cp lib/leptonweighter.pc $(PREFIX)/lib/pkgconfig
	@./check_install.sh leptonweighter "$(PREFIX)"' >> ./Makefile

echo '
uninstall:
	@echo Removing headers from $(PREFIX)/include/LeptonWeighter
	@rm -rf $(PREFIX)/include/LeptonWeighter
	@echo Removing libraries from $(PREFIX)/lib
	@rm -f $(PREFIX)/lib/$(DYN_PRODUCT)
	@rm -f $(PREFIX)/lib/$(STAT_PRODUCT)
	@echo Removing config information from $(PREFIX)/lib/pkgconfig
	@rm -f $(PREFIX)/lib/pkgconfig/leptonweighter.pc
' >> ./Makefile

echo "
export CXX=\"${CXX}\"
export CFLAGS=\"${CFLAGS} ${SQUIDS_CFLAGS} ${GSL_CFLAGS} ${HDF5_CFLAGS}\"
export CXXFLAGS=\"${CXXFLAGS} -std=c++11\"
export LDFLAGS=\"${LDFLAGS}  -lLeptonWeighter ${SQUIDS_LDFLAGS} ${GSL_LDFLAGS} ${HDF5_LDFLAGS}\"
" > test/env_vars.sh
if uname | grep -q 'Darwin' ; then
	printf "export DYLD_LIBRARY_PATH=\"" >> test/env_vars.sh
	if [ "$DYLD_LIBRARY_PATH" ]; then
		printf "${DYLD_LIBRARY_PATH}:" >> test/env_vars.sh
	fi
	printf "/lib:/usr/lib:\${HOME}/lib:/usr/local/lib:" >> test/env_vars.sh
else
	printf "export LD_LIBRARY_PATH=\"" >> test/env_vars.sh
fi
echo "../lib:${SQUIDS_LIBDIR}:${GSL_LIBDIR}:${HDF5_LIBDIR}\"" >> test/env_vars.sh

echo "Done."
echo "To build library, run the following: make
After, to build examples: make examples"
